################################################################################
#                     THIS FILE IS UNDER PUPPET CONTROL!                       #
################################################################################
<%
# Removes keys from a source Hash for which a matching knock-out key exists.
# @knockout_prefix controls the prefix String to use.  When nil or empty, no
# knock-outs occur.
#
# @summary Removes keys from a source Hash for which a matching knock-out key
#  exists.
# @param data [Hash] The source data with both normal and knock-out keys.
# @return [Hash] The culled data.
def remove_knocked_out_keys(data)
  return data if @knockout_prefix.nil? or @knockout_prefix.empty?
  knockout_keys = data.select{|k,v| k.to_s.start_with?(@knockout_prefix) }
  data.delete_if{|k,v|
    knockout_keys.include?(k) or knockout_keys.include?("#{@knockout_prefix}#{k}")
  }
  data
end

hash_name = 'postfix::master_processes'
config    = scope[hash_name]
if config and !config.empty? and config.is_a?(Hash)
  remove_knocked_out_keys(config).each { |key, attrs|
    if key =~ /^([a-z]+)\/(inet|unix|fifo|pass)$/
      srv_name    = $1
      srv_type    = $2
      srv_private = attrs.has_key?('private') ? attrs['private'] : '-'
      srv_unpriv  = attrs.has_key?('unpriv') ? attrs['unpriv'] : '-'
      srv_chroot  = attrs.has_key?('chroot') ? attrs['chroot'] : '-'
      srv_wakeup  = attrs.has_key?('wakeup') ? attrs['wakeup'] : '-'
      srv_maxproc = attrs.has_key?('maxproc') ? attrs['maxproc'] : '-'
      srv_command = attrs['command']
      %><%= "#{srv_name} #{srv_type} #{srv_private} #{srv_unpriv} #{srv_chroot} #{srv_wakeup} #{srv_maxproc} #{srv_command}\n" %><%
    else
      %><%= "# WARNING:  Ignoring malformed key, #{key}\n" %><%
    end
  }
else
  %>
#
# WARNING:
# <%= hash_name %> is missing or of an incorrect data type.
#
  <%
end %>
